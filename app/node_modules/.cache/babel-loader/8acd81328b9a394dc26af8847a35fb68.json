{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\liamp\\\\Projects\\\\coding_challenges\\\\remesh\\\\app\\\\src\\\\components\\\\Message.jsx\";\nimport React from \"react\";\nimport Thought from \"./Thought\";\nimport thoughtServices from \"../services/thoughtServices\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Message extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.createThought = event => {\n      event.stopPropagation();\n      const data = {\n        text: this.state.input,\n        cid: this.props.data.id\n      };\n      messageServices.create(data).then(() => {\n        const newMessage = this.messageMapper([data]);\n        this.setState(prevState => ({\n          messages: prevState.messages.concat(newMessage),\n          input: \"\"\n        }));\n      }).catch(err => console.error(err));\n    };\n\n    this.handleInputChange = event => {\n      this.setState(prevState => ({\n        input: event.target.value\n      }));\n    };\n\n    this.toggleOpen = () => {\n      this.setState(prevState => ({\n        open: !prevState.open\n      }));\n    };\n\n    this.state = {\n      open: false,\n      input: \"\",\n      thoughts: []\n    };\n  }\n\n  thoughtMapper(thoughts) {\n    console.log(thoughts);\n    return thoughts.map(thought => /*#__PURE__*/_jsxDEV(Thought, {\n      data: thought\n    }, thought.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 40\n    }, this));\n  }\n\n  componentDidMount() {\n    if (this.props.data.id) {\n      thoughtServices.selectByMessageId(this.props.data.id).then(thoughts => {\n        console.log(\"Thoughts:\", thoughts);\n        this.setState(prevState => ({\n          thoughts: this.thoughtMapper(thoughts)\n        }));\n      });\n    }\n  }\n\n  render() {\n    const {\n      text,\n      dateCreated,\n      dateModified\n    } = this.props.data;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"open button\",\n          onClick: this.toggleOpen,\n          children: this.state.open ? \"Close\" : \"Open\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text\",\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"created\",\n            children: dateCreated\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modified\",\n            children: dateModified\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), this.state.open && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"drawer\",\n          children: [this.state.thoughts || null, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"new-text\",\n              value: this.state.input,\n              onChange: this.handleInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"create button\",\n              onClick: this.createThought,\n              children: \"Create\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Message;","map":{"version":3,"sources":["C:/Users/liamp/Projects/coding_challenges/remesh/app/src/components/Message.jsx"],"names":["React","Thought","thoughtServices","Message","Component","constructor","props","createThought","event","stopPropagation","data","text","state","input","cid","id","messageServices","create","then","newMessage","messageMapper","setState","prevState","messages","concat","catch","err","console","error","handleInputChange","target","value","toggleOpen","open","thoughts","thoughtMapper","log","map","thought","componentDidMount","selectByMessageId","render","dateCreated","dateModified"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Thought from \"./Thought\";\r\nimport thoughtServices from \"../services/thoughtServices\";\r\n\r\nclass Message extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            input: \"\",\r\n            thoughts: [],\r\n        }\r\n    }\r\n\r\n    createThought = (event) => {\r\n        event.stopPropagation();\r\n        const data = {\r\n            text: this.state.input,\r\n            cid: this.props.data.id\r\n        }\r\n        messageServices.create(data).then(() => {\r\n            const newMessage = this.messageMapper([data]);\r\n            this.setState(prevState => ({\r\n                messages: prevState.messages.concat(newMessage),\r\n                input: \"\",\r\n            }))\r\n        }).catch(err => console.error(err))\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        this.setState(prevState => ({\r\n            input: event.target.value\r\n        }))\r\n    }\r\n\r\n    toggleOpen = () => {\r\n        this.setState(prevState => ({\r\n            open: !prevState.open\r\n        }))\r\n    }\r\n\r\n    thoughtMapper(thoughts) {\r\n        console.log(thoughts);\r\n        return thoughts.map(thought => <Thought key={thought.id} data={thought} />)\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.data.id) {\r\n            thoughtServices.selectByMessageId(this.props.data.id).then(thoughts => {\r\n                console.log(\"Thoughts:\", thoughts);\r\n                this.setState(prevState => ({ thoughts: this.thoughtMapper(thoughts) }));\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { text, dateCreated, dateModified } = this.props.data;\r\n        return (\r\n            <div className=\"message-wrapper\">\r\n                <div className=\"message\">\r\n                    <div className=\"open button\" onClick={this.toggleOpen}>{this.state.open ? \"Close\" : \"Open\"}</div>\r\n                    <div className=\"text\">{text}</div>\r\n                    <div className=\"info\">\r\n                        <div className=\"created\">{dateCreated}</div>\r\n                        <div className=\"modified\">{dateModified}</div>\r\n                    </div>\r\n                    {this.state.open &&\r\n                        <div className=\"drawer\">\r\n                            {this.state.thoughts || null}\r\n                            <div className=\"button-container\">\r\n                                <input className=\"new-text\" value={this.state.input} onChange={this.handleInputChange} />\r\n                                <div className=\"create button\" onClick={this.createThought}>Create</div>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Message;"]},"metadata":{},"sourceType":"module"}