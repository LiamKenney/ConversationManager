{"ast":null,"code":"import axios from \"axios\";\nconst cAxios = axios.create({\n  baseURL: `http://localhost:8080/conversations/`\n});\nconsole.log(process.env);\n\nconst globalHandler = config => {\n  return cAxios(config).then(handleSuccess).catch(handleError);\n};\n\nconst handleSuccess = res => {\n  if (res.data) {\n    res.data.map(datum => {\n      let newDatum = {};\n\n      if (datum[\"DateCreated\"]) {\n        datum[\"DateCreated\"] = new Date(datum[\"DateCreated\"]).toLocaleString();\n      }\n\n      if (datum[\"DateModified\"]) {\n        datum[\"DateModified\"] = new Date(datum[\"DateModified\"]).toLocaleString();\n      }\n\n      for (let key in datum) {\n        const newKey = key[0].toLowerCase() + key;\n        newDatum[key];\n      }\n    });\n  }\n\n  return res.data;\n};\n\nconst handleError = err => {\n  return Promise.reject(err);\n};\n\nconst create = data => {\n  const config = {\n    url: \"create\",\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    data\n  };\n  return globalHandler(config);\n};\n\nconst selectAll = () => {\n  const config = {\n    url: \"\",\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  return globalHandler(config);\n};\n\nconst selectById = id => {\n  const config = {\n    url: `${id}`,\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  return globalHandler(config);\n};\n\nconst update = (id, data) => {\n  const config = {\n    url: `${id}/update`,\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    data\n  };\n  return globalHandler(config);\n};\n\nconst remove = id => {\n  const config = {\n    url: `${id}/delete`,\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  return globalHandler(config);\n};\n\nconst services = {\n  create,\n  selectAll,\n  selectById,\n  update,\n  remove\n};\nexport default services;","map":{"version":3,"sources":["C:/Users/liamp/Projects/coding_challenges/remesh/app/src/services/conversationServices.js"],"names":["axios","cAxios","create","baseURL","console","log","process","env","globalHandler","config","then","handleSuccess","catch","handleError","res","data","map","datum","newDatum","Date","toLocaleString","key","newKey","toLowerCase","err","Promise","reject","url","method","headers","selectAll","selectById","id","update","remove","services"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\nconst cAxios = axios.create({\r\n  baseURL: `http://localhost:8080/conversations/`,\r\n});\r\n\r\nconsole.log(process.env);\r\n\r\nconst globalHandler = (config) => {\r\n  return cAxios(config).then(handleSuccess).catch(handleError);\r\n};\r\n\r\nconst handleSuccess = (res) => {\r\n  if (res.data) {\r\n    res.data.map((datum) => {\r\n        let newDatum = {};\r\n      if (datum[\"DateCreated\"]) {\r\n        datum[\"DateCreated\"] = new Date(datum[\"DateCreated\"]).toLocaleString();\r\n      }\r\n      if (datum[\"DateModified\"]) {\r\n        datum[\"DateModified\"] = new Date(datum[\"DateModified\"]).toLocaleString();\r\n      }\r\n      for (let key in datum) {\r\n          const newKey = key[0].toLowerCase() + key\r\n          newDatum[key]\r\n      }\r\n    });\r\n  }\r\n  return res.data;\r\n};\r\n\r\nconst handleError = (err) => {\r\n  return Promise.reject(err);\r\n};\r\n\r\nconst create = (data) => {\r\n  const config = {\r\n    url: \"create\",\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    data,\r\n  };\r\n\r\n  return globalHandler(config);\r\n};\r\n\r\nconst selectAll = () => {\r\n  const config = {\r\n    url: \"\",\r\n    method: \"GET\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  };\r\n\r\n  return globalHandler(config);\r\n};\r\n\r\nconst selectById = (id) => {\r\n  const config = {\r\n    url: `${id}`,\r\n    method: \"GET\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  };\r\n\r\n  return globalHandler(config);\r\n};\r\n\r\nconst update = (id, data) => {\r\n  const config = {\r\n    url: `${id}/update`,\r\n    method: \"PUT\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    data,\r\n  };\r\n\r\n  return globalHandler(config);\r\n};\r\n\r\nconst remove = (id) => {\r\n  const config = {\r\n    url: `${id}/delete`,\r\n    method: \"DELETE\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  };\r\n\r\n  return globalHandler(config);\r\n};\r\nconst services = { create, selectAll, selectById, update, remove };\r\nexport default services;\r\n"]},"metadata":{},"sourceType":"module"}