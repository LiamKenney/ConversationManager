{"ast":null,"code":"import axios from \"axios\";\nconst cAxios = axios.create({\n  baseURL: `http://localhost:8080/conversations/`\n});\nconsole.log(process.env);\n\nconst globalHandler = config => {\n  return cAxios(config).then(handleSuccess).catch(handleError);\n};\n\nconst handleSuccess = res => {\n  if (res.data) {\n    res.data.forEach(val => {\n      if (val[\"DateCreated\"]) {\n        val[\"DateCreated\"] = new Date(val[\"DateCreated\"]).toLocaleString();\n      }\n\n      if (val[\"DateModified\"]) val[\"DateModified\"] = new Date(val[\"DateModified\"]).toLocaleString();\n    });\n  }\n\n  return res.data;\n};\n\nconst handleError = err => {\n  return Promise.reject(err);\n};\n\nconst create = data => {\n  const config = {\n    url: \"create\",\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    data\n  };\n  return globalHandler(config);\n};\n\nconst selectAll = () => {\n  const config = {\n    url: \"\",\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  return globalHandler(config);\n};\n\nconst selectById = id => {\n  const config = {\n    url: `${id}`,\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  return globalHandler(config);\n};\n\nconst update = (id, data) => {\n  const config = {\n    url: `${id}/update`,\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    data\n  };\n  return globalHandler(config);\n};\n\nconst remove = id => {\n  const config = {\n    url: `${id}/delete`,\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  return globalHandler(config);\n};\n\nconst services = {\n  create,\n  selectAll,\n  selectById,\n  update,\n  remove\n};\nexport default services;","map":{"version":3,"sources":["C:/Users/liamp/Projects/coding_challenges/remesh/app/src/services/conversationServices.js"],"names":["axios","cAxios","create","baseURL","console","log","process","env","globalHandler","config","then","handleSuccess","catch","handleError","res","data","forEach","val","Date","toLocaleString","err","Promise","reject","url","method","headers","selectAll","selectById","id","update","remove","services"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,MAAM,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAG;AADgB,CAAb,CAAf;AAIAC,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAApB;;AAEA,MAAMC,aAAa,GAAIC,MAAD,IAAY;AAChC,SAAOR,MAAM,CAACQ,MAAD,CAAN,CAAeC,IAAf,CAAoBC,aAApB,EAAmCC,KAAnC,CAAyCC,WAAzC,CAAP;AACD,CAFD;;AAIA,MAAMF,aAAa,GAAIG,GAAD,IAAS;AAC7B,MAAIA,GAAG,CAACC,IAAR,EAAc;AACZD,IAAAA,GAAG,CAACC,IAAJ,CAASC,OAAT,CAAkBC,GAAD,IAAS;AACxB,UAAIA,GAAG,CAAC,aAAD,CAAP,EAAuB;AACrBA,QAAAA,GAAG,CAAC,aAAD,CAAH,GAAqB,IAAIC,IAAJ,CAASD,GAAG,CAAC,aAAD,CAAZ,EAA6BE,cAA7B,EAArB;AACD;;AACD,UAAIF,GAAG,CAAC,cAAD,CAAP,EACEA,GAAG,CAAC,cAAD,CAAH,GAAsB,IAAIC,IAAJ,CAASD,GAAG,CAAC,cAAD,CAAZ,EAA8BE,cAA9B,EAAtB;AACH,KAND;AAOD;;AACD,SAAOL,GAAG,CAACC,IAAX;AACD,CAXD;;AAaA,MAAMF,WAAW,GAAIO,GAAD,IAAS;AAC3B,SAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACD,CAFD;;AAIA,MAAMlB,MAAM,GAAIa,IAAD,IAAU;AACvB,QAAMN,MAAM,GAAG;AACbc,IAAAA,GAAG,EAAE,QADQ;AAEbC,IAAAA,MAAM,EAAE,MAFK;AAGbC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAHI;AAIbV,IAAAA;AAJa,GAAf;AAOA,SAAOP,aAAa,CAACC,MAAD,CAApB;AACD,CATD;;AAWA,MAAMiB,SAAS,GAAG,MAAM;AACtB,QAAMjB,MAAM,GAAG;AACbc,IAAAA,GAAG,EAAE,EADQ;AAEbC,IAAAA,MAAM,EAAE,KAFK;AAGbC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AAHI,GAAf;AAMA,SAAOjB,aAAa,CAACC,MAAD,CAApB;AACD,CARD;;AAUA,MAAMkB,UAAU,GAAIC,EAAD,IAAQ;AACzB,QAAMnB,MAAM,GAAG;AACbc,IAAAA,GAAG,EAAG,GAAEK,EAAG,EADE;AAEbJ,IAAAA,MAAM,EAAE,KAFK;AAGbC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AAHI,GAAf;AAMA,SAAOjB,aAAa,CAACC,MAAD,CAApB;AACD,CARD;;AAUA,MAAMoB,MAAM,GAAG,CAACD,EAAD,EAAKb,IAAL,KAAc;AAC3B,QAAMN,MAAM,GAAG;AACbc,IAAAA,GAAG,EAAG,GAAEK,EAAG,SADE;AAEbJ,IAAAA,MAAM,EAAE,KAFK;AAGbC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAHI;AAIbV,IAAAA;AAJa,GAAf;AAOA,SAAOP,aAAa,CAACC,MAAD,CAApB;AACD,CATD;;AAWA,MAAMqB,MAAM,GAAIF,EAAD,IAAQ;AACrB,QAAMnB,MAAM,GAAG;AACbc,IAAAA,GAAG,EAAG,GAAEK,EAAG,SADE;AAEbJ,IAAAA,MAAM,EAAE,QAFK;AAGbC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AAHI,GAAf;AAMA,SAAOjB,aAAa,CAACC,MAAD,CAApB;AACD,CARD;;AASA,MAAMsB,QAAQ,GAAG;AAAE7B,EAAAA,MAAF;AAAUwB,EAAAA,SAAV;AAAqBC,EAAAA,UAArB;AAAiCE,EAAAA,MAAjC;AAAyCC,EAAAA;AAAzC,CAAjB;AACA,eAAeC,QAAf","sourcesContent":["import axios from \"axios\";\r\n\r\nconst cAxios = axios.create({\r\n  baseURL: `http://localhost:8080/conversations/`,\r\n});\r\n\r\nconsole.log(process.env);\r\n\r\nconst globalHandler = (config) => {\r\n  return cAxios(config).then(handleSuccess).catch(handleError);\r\n};\r\n\r\nconst handleSuccess = (res) => {\r\n  if (res.data) {\r\n    res.data.forEach((val) => {\r\n      if (val[\"DateCreated\"]){\r\n        val[\"DateCreated\"] = new Date(val[\"DateCreated\"]).toLocaleString();\r\n      }\r\n      if (val[\"DateModified\"])\r\n        val[\"DateModified\"] = new Date(val[\"DateModified\"]).toLocaleString();\r\n    });\r\n  }\r\n  return res.data;\r\n};\r\n\r\nconst handleError = (err) => {\r\n  return Promise.reject(err);\r\n};\r\n\r\nconst create = (data) => {\r\n  const config = {\r\n    url: \"create\",\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    data,\r\n  };\r\n\r\n  return globalHandler(config);\r\n};\r\n\r\nconst selectAll = () => {\r\n  const config = {\r\n    url: \"\",\r\n    method: \"GET\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  };\r\n\r\n  return globalHandler(config);\r\n};\r\n\r\nconst selectById = (id) => {\r\n  const config = {\r\n    url: `${id}`,\r\n    method: \"GET\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  };\r\n\r\n  return globalHandler(config);\r\n};\r\n\r\nconst update = (id, data) => {\r\n  const config = {\r\n    url: `${id}/update`,\r\n    method: \"PUT\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    data,\r\n  };\r\n\r\n  return globalHandler(config);\r\n};\r\n\r\nconst remove = (id) => {\r\n  const config = {\r\n    url: `${id}/delete`,\r\n    method: \"DELETE\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  };\r\n\r\n  return globalHandler(config);\r\n};\r\nconst services = { create, selectAll, selectById, update, remove };\r\nexport default services;\r\n"]},"metadata":{},"sourceType":"module"}