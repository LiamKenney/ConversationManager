{"ast":null,"code":"import axios from \"axios\";\nconst cAxios = axios.create({\n  baseURL: `http://localhost:8080/messages/`\n});\n\nconst globalHandler = config => {\n  return cAxios(config).then(handleSuccess).catch(handleError);\n};\n\nconst handleSuccess = res => {\n  return res.data;\n};\n\nconst handleError = err => {\n  return Promise.reject(err);\n};\n\nconst create = data => {\n  const config = {\n    url: \"create\",\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    data\n  };\n  return globalHandler(config);\n};\n\nconst selectAll = () => {\n  const config = {\n    url: \"\",\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  return globalHandler(config);\n};\n\nconst selectById = id => {\n  const config = {\n    url: `${id}`,\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  return globalHandler(config);\n};\n\nconst selectByConversationId = cid => {\n  const config = {\n    url: \"\",\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    params: {\n      cid\n    }\n  };\n  return globalHandler(config);\n};\n\nconst update = (id, data) => {\n  const config = {\n    url: `${id}/update`,\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    data\n  };\n  return globalHandler(config);\n};\n\nconst remove = id => {\n  const config = {\n    url: `${id}/delete`,\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  return globalHandler(config);\n};\n\nexport default {\n  create,\n  selectAll,\n  selectById,\n  selectByConversationId,\n  update,\n  remove\n};","map":{"version":3,"sources":["C:/Users/liamp/Projects/coding_challenges/remesh/app/src/services/messageServices.js"],"names":["axios","cAxios","create","baseURL","globalHandler","config","then","handleSuccess","catch","handleError","res","data","err","Promise","reject","url","method","headers","selectAll","selectById","id","selectByConversationId","cid","params","update","remove"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,MAAM,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAG;AADgB,CAAb,CAAf;;AAIA,MAAMC,aAAa,GAAIC,MAAD,IAAY;AAChC,SAAOJ,MAAM,CAACI,MAAD,CAAN,CAAeC,IAAf,CAAoBC,aAApB,EAAmCC,KAAnC,CAAyCC,WAAzC,CAAP;AACD,CAFD;;AAIA,MAAMF,aAAa,GAAIG,GAAD,IAAS;AAC7B,SAAOA,GAAG,CAACC,IAAX;AACD,CAFD;;AAIA,MAAMF,WAAW,GAAIG,GAAD,IAAS;AAC3B,SAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACD,CAFD;;AAIA,MAAMV,MAAM,GAAIS,IAAD,IAAU;AACvB,QAAMN,MAAM,GAAG;AACbU,IAAAA,GAAG,EAAE,QADQ;AAEbC,IAAAA,MAAM,EAAE,MAFK;AAGbC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAHI;AAIbN,IAAAA;AAJa,GAAf;AAOA,SAAOP,aAAa,CAACC,MAAD,CAApB;AACD,CATD;;AAWA,MAAMa,SAAS,GAAG,MAAM;AACtB,QAAMb,MAAM,GAAG;AACbU,IAAAA,GAAG,EAAE,EADQ;AAEbC,IAAAA,MAAM,EAAE,KAFK;AAGbC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AAHI,GAAf;AAMA,SAAOb,aAAa,CAACC,MAAD,CAApB;AACD,CARD;;AAUA,MAAMc,UAAU,GAAIC,EAAD,IAAQ;AACzB,QAAMf,MAAM,GAAG;AACbU,IAAAA,GAAG,EAAG,GAAEK,EAAG,EADE;AAEbJ,IAAAA,MAAM,EAAE,KAFK;AAGbC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AAHI,GAAf;AAMA,SAAOb,aAAa,CAACC,MAAD,CAApB;AACD,CARD;;AAUA,MAAMgB,sBAAsB,GAAIC,GAAD,IAAS;AACtC,QAAMjB,MAAM,GAAG;AACbU,IAAAA,GAAG,EAAE,EADQ;AAEbC,IAAAA,MAAM,EAAE,KAFK;AAGbC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAHI;AAIbM,IAAAA,MAAM,EAAE;AAAED,MAAAA;AAAF;AAJK,GAAf;AAOA,SAAOlB,aAAa,CAACC,MAAD,CAApB;AACD,CATD;;AAWA,MAAMmB,MAAM,GAAG,CAACJ,EAAD,EAAKT,IAAL,KAAc;AAC3B,QAAMN,MAAM,GAAG;AACbU,IAAAA,GAAG,EAAG,GAAEK,EAAG,SADE;AAEbJ,IAAAA,MAAM,EAAE,KAFK;AAGbC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAHI;AAIbN,IAAAA;AAJa,GAAf;AAOA,SAAOP,aAAa,CAACC,MAAD,CAApB;AACD,CATD;;AAWA,MAAMoB,MAAM,GAAIL,EAAD,IAAQ;AACrB,QAAMf,MAAM,GAAG;AACbU,IAAAA,GAAG,EAAG,GAAEK,EAAG,SADE;AAEbJ,IAAAA,MAAM,EAAE,QAFK;AAGbC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AAHI,GAAf;AAMA,SAAOb,aAAa,CAACC,MAAD,CAApB;AACD,CARD;;AAUA,eAAe;AACbH,EAAAA,MADa;AAEbgB,EAAAA,SAFa;AAGbC,EAAAA,UAHa;AAIbE,EAAAA,sBAJa;AAKbG,EAAAA,MALa;AAMbC,EAAAA;AANa,CAAf","sourcesContent":["import axios from \"axios\";\r\n\r\nconst cAxios = axios.create({\r\n  baseURL: `http://localhost:8080/messages/`,\r\n});\r\n\r\nconst globalHandler = (config) => {\r\n  return cAxios(config).then(handleSuccess).catch(handleError);\r\n};\r\n\r\nconst handleSuccess = (res) => {\r\n  return res.data;\r\n};\r\n\r\nconst handleError = (err) => {\r\n  return Promise.reject(err);\r\n};\r\n\r\nconst create = (data) => {\r\n  const config = {\r\n    url: \"create\",\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    data,\r\n  };\r\n\r\n  return globalHandler(config);\r\n};\r\n\r\nconst selectAll = () => {\r\n  const config = {\r\n    url: \"\",\r\n    method: \"GET\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  };\r\n\r\n  return globalHandler(config);\r\n};\r\n\r\nconst selectById = (id) => {\r\n  const config = {\r\n    url: `${id}`,\r\n    method: \"GET\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  };\r\n\r\n  return globalHandler(config);\r\n};\r\n\r\nconst selectByConversationId = (cid) => {\r\n  const config = {\r\n    url: \"\",\r\n    method: \"GET\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    params: { cid },\r\n  };\r\n\r\n  return globalHandler(config);\r\n};\r\n\r\nconst update = (id, data) => {\r\n  const config = {\r\n    url: `${id}/update`,\r\n    method: \"PUT\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    data,\r\n  };\r\n\r\n  return globalHandler(config);\r\n};\r\n\r\nconst remove = (id) => {\r\n  const config = {\r\n    url: `${id}/delete`,\r\n    method: \"DELETE\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  };\r\n\r\n  return globalHandler(config);\r\n};\r\n\r\nexport default {\r\n  create,\r\n  selectAll,\r\n  selectById,\r\n  selectByConversationId,\r\n  update,\r\n  remove,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}